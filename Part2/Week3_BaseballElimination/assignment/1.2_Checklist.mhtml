From: <Saved by Blink>
Subject: Programming Assignment Checklist: Baseball Elimination
Date: Sat, 4 Dec 2015 07:03:25 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_4946_0B592769.A8FA81A0"

------=_NextPart_000_4946_0B592769.A8FA81A0
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: http://coursera.cs.princeton.edu/algs4/checklists/baseball.html

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8">
<title>
Programming Assignment Checklist: Baseball Elimination
</title>
</head>

<body><div id=3D"lingualy-logged-in" style=3D"display:none;"></div><div id=
=3D"lingualy-installed" style=3D"display:none;"></div><div id=3D"lingualypo=
pup" class=3D"lingualy_popup" style=3D"display:none;"></div>
<h3>
Programming Assignment Checklist: Baseball Elimination
</h3>



<table border=3D"0" cellpadding=3D"2" cellspacing=3D"0" width=3D"100%">
<tbody><tr align=3D"left">
<td bgcolor=3D"000000">
<font size=3D"+0" face=3D"helvetica" color=3D"ffffff">
<center>Frequently Asked Questions</center>
</font></td></tr></tbody></table>

<p lingdex=3D"0">
<b>How do I read in the data?</b>
We recommend using the <tt>readInt()</tt> and <tt>readString()</tt> methods
from <a href=3D"http://introcs.cs.princeton.edu/java/stdlib/In.java.html">I=
n.java</a>.

</p><p lingdex=3D"1">
<b>How efficient should my program be?
</b>
You should be able to handle all of the test input files provided (say, in
less than a minute).
Do not worry about over-optimizing your program because the data sets
that arise in real applications are tiny.

</p><p lingdex=3D"2">
<b>What should I return if there is more than one certificate of eliminatio=
n?
</b>
Return any such subset.

</p><p lingdex=3D"3">
<b>Must I output the teams in the same order as in the input file (as does =
the reference solution)?</b>

No, any order is fine.

</p><p lingdex=3D"4">
<b>Should <tt>certificateOfElimination()</tt> work even if=20
<tt>isEliminated()</tt> has not been called by the client first?
</b>
Absolutely. It is bad design (and a violation of the API)
for the success of calling one method to depend
on the client previously calling another method.

</p><p lingdex=3D"5">
<b>How do I compute the mincut?
</b>
The <tt>inCut()</tt> method in
<a href=3D"http://algs4.cs.princeton.edu/64maxflow/FordFulkerson.java.html"=
>
FordFulkerson.java</a> takes a vertex as an argument and returns true if
that vertex is on the <em>s</em>-side of the mincut.

</p><p lingdex=3D"6">
<b>How do I specify an infinite capacity for an edge?
</b>
Use <tt>Double.POSITIVE_INFINITY</tt>.

</p><p lingdex=3D"7">
<b>What would cause <tt>FordFulkerson.java</tt> to throw a runtime exceptio=
n
with the message
<tt>"Edge does not satisfy capacity constraints: ..."</tt>?
</b>
Did you create an edge with negative capacity?


</p><p lingdex=3D"8"><b>My program runs much faster in practice than my the=
oretical analysis
guarantees. Should I be concerned?</b>
No, there are a number of reasons why your program will perform better than
your worst-case guarantee.

</p><ul>

<p lingdex=3D"9"></p><li>
If a team is eliminated for a trivial reason, your code may run much faster
because it avoids computing a maxflow.

<p lingdex=3D"10"></p></li><li>
If there are no games between most pairs of teams, then the flow network yo=
u
construct may have many fewer edges than in the worst case.

<p lingdex=3D"11"></p></li><li>
The flow networks that arise in the baseball elimination problem have speci=
al
structure, e.g., they are bipartite and the edge capacities are small integ=
ers.
As a result, the Ford-Fulkerson algorithm performs significantly faster
than its worst-case guarantee of <em>V</em> <em>E</em><sup>2</sup>.


</li></ul>

<!--
For the input files <tt>teams[xx]-dense.txt</tt>, our reference solution
has a running time of about N^4.5 to determine <em>all</em> teams
that are mathematically eliminated.
-->


<p lingdex=3D"12">

<table border=3D"0" cellpadding=3D"2" cellspacing=3D"0" width=3D"100%">
<tbody><tr align=3D"left">
<td bgcolor=3D"000000">
<font size=3D"+0" face=3D"helvetica" color=3D"ffffff">
<center>Input</center>
</font></td></tr></tbody></table>

</p><p lingdex=3D"13">
<strong>Input and testing.</strong>

The directory
<a href=3D"http://coursera.cs.princeton.edu/algs4/testing/baseball">basebal=
l</a>
contains some sample input files.
For convenience, <a href=3D"http://coursera.cs.princeton.edu/algs4/testing/=
baseball-testing.zip">baseball-testing.zip</a>
contains all of these files bundled together.

</p><p lingdex=3D"14">
<b>Testing.</b>
&nbsp;
For reference, the teams below are mathematically eliminated for <em>nontri=
vial</em> reasons.
By nontrivial, we mean that the certificate of elimination requires two or =
more teams. If a team is trivially eliminated, it does not appear in the li=
st below.

</p><ul>

<p lingdex=3D"15"></p><li> <a href=3D"http://coursera.cs.princeton.edu/algs=
4/testing/baseball/teams4.txt">teams4.txt</a>: Philadelphia.

<p lingdex=3D"16"></p></li><li> <a href=3D"http://coursera.cs.princeton.edu=
/algs4/testing/baseball/teams4a.txt">teams4a.txt</a>: Ghaddafi.

<p lingdex=3D"17"></p></li><li> <a href=3D"http://coursera.cs.princeton.edu=
/algs4/testing/baseball/teams5.txt">teams5.txt</a>: Detroit.

<p lingdex=3D"18"></p></li><li> <a href=3D"http://coursera.cs.princeton.edu=
/algs4/testing/baseball/teams7.txt">teams7.txt</a>: Ireland.

<p lingdex=3D"19"></p></li><li> <a href=3D"http://coursera.cs.princeton.edu=
/algs4/testing/baseball/teams24.txt">teams24.txt</a>: Team13.

<p lingdex=3D"20"></p></li><li> <a href=3D"http://coursera.cs.princeton.edu=
/algs4/testing/baseball/teams32.txt">teams32.txt</a>:=20
Team25, Team29.

<p lingdex=3D"21"></p></li><li> <a href=3D"http://coursera.cs.princeton.edu=
/algs4/testing/baseball/teams36.txt">teams36.txt</a>:=20
Team21.

<p lingdex=3D"22"></p></li><li> <a href=3D"http://coursera.cs.princeton.edu=
/algs4/testing/baseball/teams42.txt">teams42.txt</a>:=20
Team6, Team15, Team25.

<p lingdex=3D"23"></p></li><li> <a href=3D"http://coursera.cs.princeton.edu=
/algs4/testing/baseball/teams48.txt">teams48.txt</a>:=20
Team6, Team23, Team47.

<p lingdex=3D"24"></p></li><li> <a href=3D"http://coursera.cs.princeton.edu=
/algs4/testing/baseball/teams54.txt">teams54.txt</a>:=20
Team3, Team29, Team37, Team50.

</li></ul>

To verify that you are returning a valid certificate of elimination <em>R</=
em>, compute
<em>a</em>(<em>R</em>) =3D (<em>w</em>(<em>R</em>) + <em>g</em>(<em>R</em>)=
) / |<em>R</em>|,
where <em>w</em>(<em>R</em>) is the total number of wins of teams in <em>R<=
/em>,
<em>g</em>(<em>R</em>) is the total number of remaining games
between teams in <em>R</em>, and |<em>R</em>| is the number
of teams in <em>R</em>. Check that <em>a</em>(<em>R</em>) is greater than t=
he maximum number of games
the eliminated team can win


<p lingdex=3D"25">
<table border=3D"0" cellpadding=3D"2" cellspacing=3D"0" width=3D"100%">
<tbody><tr align=3D"left">
<td bgcolor=3D"000000">
<font size=3D"+0" face=3D"helvetica" color=3D"ffffff">
<center>Possible Progress Steps</center>
</font></td></tr></tbody></table>

</p><p lingdex=3D"26">These are purely suggestions for how you might make p=
rogress. You do not have to follow these steps.=20

</p><ul>

<!--
<p><li> Download the zip file
<a href =3D "http://coursera.cs.princeton.edu/algs4/testing/baseball-testin=
g.zip">baseball-testing.zip</a>.
It contains a number of sample input files.
-->

<p lingdex=3D"27"></p><li>
Write code to read in the input file and store the data.

<p lingdex=3D"28"></p></li><li>
Draw by hand the <tt>FlowNetwork</tt> graph that you want to construct
for a few small examples.
Write the code to construct the <tt>FlowNetwork</tt>, print it out using
the <tt>toString()</tt> method, and and make sure that it matches your
intent.
Do not continue until you have thoroughly tested this stage.


<p lingdex=3D"29"></p></li><li>
Compute the maxflow and mincut using the <tt>FordFulkerson</tt> data type.
You can access the value of the flow with the <tt>value()</tt> method;
you can identify which vertices are on the source side of the mincut
with the <tt>inCut()</tt> method.

<p lingdex=3D"30"></p></li><li> The <tt>BaseballElimination</tt> API contai=
ns the public methods
that you will implement. For modularity, you will want to add some
private helper methods of your own.

</li></ul>
=20
<p lingdex=3D"31">
Your program shouldn't be too long=E2=80=94ours is less than 200 lines.
If things get complicated, take a step back and re-think your approach.




</p><p lingdex=3D"32">
<table border=3D"0" cellpadding=3D"2" cellspacing=3D"0" width=3D"100%">
<tbody><tr align=3D"left">
<td bgcolor=3D"000000">
<font size=3D"+0" face=3D"helvetica" color=3D"ffffff">
<center>Enrichment links</center>
</font></td></tr></tbody></table>

</p><p lingdex=3D"33">

</p><ul>

<p lingdex=3D"34"></p><li> A group of researchers at Berkeley maintain a we=
bsite
where you can view the
<a href=3D"http://lyle.smu.edu/~olinick/riot/baseball_main.html">baseball e=
limination numbers</a> as the season unfolds.
</li></ul>

<p lingdex=3D"35">


</p><style type=3D"text/css">.lingualy-translate-close {background: url("ch=
rome-extension://iilcekgoelpgecpjnnoikhbleipnjdhf/lookup/assets/translate/x=
_normal.png") no-repeat;}.lingualy-translate-close:hover {background: url("=
chrome-extension://iilcekgoelpgecpjnnoikhbleipnjdhf/lookup/assets/translate=
/x_over.png");}.lingualy_popup .lingualy_close {background: url("chrome-ext=
ension://iilcekgoelpgecpjnnoikhbleipnjdhf/lookup/assets/andy-sprite.png") n=
o-repeat 0 -50px;}</style></body></html>
------=_NextPart_000_4946_0B592769.A8FA81A0--
