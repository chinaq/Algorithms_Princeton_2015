From: <Saved by Blink>
Subject: Programming Assignment Checklist: Burrows-Wheeler Data Compression
Date: Tue, 21 Dec 2015 08:48:22 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_B255_49F278D0.45CD3CB6"

------=_NextPart_000_B255_49F278D0.45CD3CB6
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: http://coursera.cs.princeton.edu/algs4/checklists/burrows.html

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8">
<title>
Programming Assignment Checklist: Burrows-Wheeler Data Compression=20
</title>
</head>

<body><div id=3D"lingualy-logged-in" style=3D"display:none;"></div><div id=
=3D"lingualy-installed" style=3D"display:none;"></div><div id=3D"lingualypo=
pup" class=3D"lingualy_popup" style=3D"display:none;"></div>
<h3>Programming Assignment Checklist: Burrows-Wheeler Data Compression</h3>


<table border=3D"0" cellpadding=3D"2" cellspacing=3D"0" width=3D"100%"> <tb=
ody><tr align=3D"left"> <td bgcolor=3D"000000"> <font size=3D"+0" face=3D"h=
elvetica" color=3D"ffffff">=20
<center>Frequently Asked Questions</center> </font></td></tr></tbody></tabl=
e>

<p lingdex=3D"0"><b>What program should I use for reading and writing the d=
ata?</b> You must use=20
<tt>BinaryStdIn.java</tt> and <tt>BinaryStdOut.java</tt>. These read and wr=
ite sequences=20
of bytes, whereas <tt>StdIn.java</tt> and <tt>StdOut.java</tt>
read and write sequences of Unicode=20
characters. These are in <a href=3D"http://introcs.cs.princeton.edu/stdlib/=
stdlib.jar">stdlib.jar</a>.

</p><p lingdex=3D"1"><b>My programs work from the command line but the auto=
grader complains that that it can't read in the input.
Any ideas?</b>
The autograder calls <tt>main()</tt> more than once. So, be sure that any s=
tatic variables get reset
appropriately (or, better yet, don't use static variables).

</p><p lingdex=3D"2"><b>My programs don't work properly with binary data. W=
hy not?</b> Be absolutely sure=20
that you use only <tt>BinaryStdIn.java</tt> and <tt>BinaryStdOut.java</tt> =
for input=20
and output. Also, be sure that you call <tt>BinaryStdOut.flush()</tt> or=20
<tt>BinaryStdOut.close()</tt> after you are done writing=E2=80=94see <tt>Hu=
ffman.expand()</tt>
for an example.

</p><p lingdex=3D"3"><b>Why does <tt>BinaryStdIn</tt> return the 8-bits as =
a (16-bit unsigned) <tt>char</tt>=20
instead of as an (8-bit signed) <tt>byte</tt></b>? The primitive type <tt>b=
yte</tt> is annoying
to use in Java. When you operate on a <tt>byte</tt>, it is typically promot=
ed to an=20
<tt>int</tt> and you must be careful because the byte is signed.
For example, to convert a <tt>byte b</tt> to a <tt>char c</tt>, you must wr=
ite=20
<tt>c =3D (char) (b &amp; 0xff)</tt> instead of <tt>c =3D (char) b</tt>. By=
 using <tt>char</tt>,=20
we avoid the hassle.

</p><p lingdex=3D"4"><b>For the Burrows-Wheeler encoder, in which order do =
I sort the suffixes?</b>
The input is a sequence of extended ASCII characters (00 to FF), which you =
can read in with=20
<tt>BinaryStdIn.readString()</tt>. You should sort the suffixes according t=
o
extended ASCII order, which is the natural order of the <tt>String</tt> dat=
a type.

</p><p lingdex=3D"5"><b>For the Burrows-Wheeler decoder, does <tt>next[0]</=
tt> always equal first?
And wouldn't this mean that the index <tt>first</tt> is redundant?</b>
No, this is just a coincidence with the input string <tt>"ABRACADABRA!"</tt=
>.
Consider any two input strings that are cyclic rotations of one another,
e.g., <tt>"ABRACADABRA!"</tt> and <tt>"CADABRA!ABRA"</tt>. They will have t=
he same
sorted suffixes and <tt>t[]</tt> array=E2=80=94their only difference will b=
e in
the index <tt>first</tt>.

</p><p lingdex=3D"6"><b>Can I assume that the decode() method in BurrowsWhe=
eler receives only
valid inputs (that were created by a call to the encode() method)?</b>
Yes.

</p><p lingdex=3D"7"><b>How can I view the contents of a binary file and de=
termine its size?</b>
Use
<a href=3D"http://algs4.cs.princeton.edu/55compression/HexDump.java.html">H=
exDump.java</a>,
as in the assignment.
The command-line argument specifies the number of bytes per line to print; =
if the argument is
0, all output except for the number of bits will be suppressed.

<!-- <p><b>I have a difference of one character when I combine all three en=
coders (even=20
though when I run each encoder separately I have no differences). Is this a=
 Windows=20
curiosity?</b> Yes, we think so. Try running on hats. -->

</p><p lingdex=3D"8"><b>How much memory can my program consume?</b> The Bur=
rows-Wheeler encoder may use=20
quite a bit, so you may need to use the <tt>-Xmx</tt> option when executing=
. You must use=20
space linear in the input size <em>N</em> and alphabet size <em>R</em>.
(Industrial strength Burrows-Wheeler compression=20
algorithms typically use a fixed block size, and encode the message in thes=
e smaller=20
chunks. This reduces the memory requirements, at the expense of some loss i=
n compression=20
ratio.)
Therefore, depending on your operating system and configuration=20
there may be some very large files for which your program will not have=20
enough memory even with the <tt>-Xmx</tt> option.

</p><p lingdex=3D"9"><b>I'm running out of memory in the Burrows-Wheeler en=
coder. Any ideas?</b>
Watch out for creating new strings via <tt>substring()</tt> or string conca=
tenation.
Remember, that, as of Java 7u6,=20
substring extraction no longer takes constant time or space!

</p><p lingdex=3D"10"><b>What is meant by "typical English text inputs"?</b=
>
Inputs such as <tt>aesop.txt</tt>, <tt>moby.txt</tt>, or your most recent e=
ssay.
We do not mean files such as <tt>aesop3copies.txt</tt> or random sequences =
of characters.

</p><p lingdex=3D"11"><b>How do I use gzip and bzip2 on Windows?</b> It's f=
ine to use pkzip or
<a href=3D"http://www.7-zip.org/">7-zip</a> instead.

</p><p lingdex=3D"12"><b>I'm curious. What compression algorithm is used in=
 PKZIP? In gzip? In bzip2?</b>=20
PKZIP uses LZW compression followed by Shannon-Fano (an entropy encoder sim=
ilar
to Huffman). The Unix utility gzip uses a variation of LZ77 (similar=20
to LZW) followed by Huffman coding. The program bzip2 combines the
Burrows-Wheeler transform, Huffman coding, and a (fancier) move-to-front st=
yle rule.

</p><p lingdex=3D"13">

<table border=3D"0" cellpadding=3D"2" cellspacing=3D"0" width=3D"100%"> <tb=
ody><tr align=3D"left"> <td bgcolor=3D"000000"> <font size=3D"+0" face=3D"h=
elvetica" color=3D"ffffff"> <center>Testing</center> </font></td></tr></tbo=
dy></table>

</p><p lingdex=3D"14"><b>Input.</b> Here are some <a href=3D"http://courser=
a.cs.princeton.edu/algs4/testing/textfiles">sample input files</a>.
For convenience, <a href=3D"http://coursera.cs.princeton.edu/algs4/testing/=
textfiles-testing.zip">textfiles-testing.zip</a>
contains all of these files bundled together.
To fully test=20
your program, you should also try to compress and uncompress binary files (=
e.g., .class or=20
.jpg files).
Be careful to download them as binary files=E2=80=94some browsers will corr=
upt them
if you view the file and use File -&gt; Save.
Do not edit them in a text editor=E2=80=94some editors will corrupt them
by inserting bogus newline characters.



</p><p lingdex=3D"15"><b>Reference solutions.</b> For reference, we have pr=
ovided the output of compressing=20
<tt>aesop.txt</tt> and <tt>us.gif</tt>. We have also provided the results o=
f applying each=20
of the three encoding algorithms in isolation. Note that the .gif file is a=
 binary file and=20
is already compressed.

</p><p lingdex=3D"16">
To compare the contents of two files, you can use the following commands:

</p><ul>
<p lingdex=3D"17"></p><li><em>Mac OS X or Linux:</em> <tt>diff file1 file2<=
/tt>
<p lingdex=3D"18"></p></li><li><em>Windows:</em> <tt>fc file1 file2</tt>
</li></ul>


<p lingdex=3D"19"><b>Timing your program.</b>=20

</p><ul>
<p lingdex=3D"20"></p><li><em>Mac OS X or Linux.</em>
Use the following command:
    <pre>% time java BurrowsWheeler - &lt; mobydick.txt | java MoveToFront =
- | java Huffman - &gt; mobyDickOutputFileName</pre>
You want to record the "real" value.

<p lingdex=3D"21"></p></li><li><em>Windows.</em>
We recommend using a simple batch file. The
process for creating and running a batch file is as follows:

<ol>
    <p lingdex=3D"22"></p><li> Create a file called <tt>timeTest.bat</tt> i=
n the same directory as your Burrows wheeler assignment.=20
    This is known as a "batch file". </li>
    <p lingdex=3D"23"></p><li> Inside that file, put the following text (us=
ing Notepad or a similar text editor):

    <pre>    echo %time%
    java BurrowsWheeler - &lt; mobydick.txt | java MoveToFront - | java Huf=
fman - &gt; mobyDickOutputFileName
    echo %time%
    </pre>

    <p lingdex=3D"24"></p></li><li>Execute <tt>timeTest.bat</tt> by navigat=
ing a terminal window so that it's
           in the same directory as <tt>timeTest.bat</tt> and your .java fi=
les and
           type <tt>timeTest</tt>.
       </li>

</ol>

<p lingdex=3D"25">
Make sure you name the batch file <tt>timeTest.bat</tt> instead of
<tt>timeTest.bat.txt</tt>.
Note that you can test multiple files by adding more lines to the batch fil=
e.

</p></li></ul>

<p lingdex=3D"26"><b>Timing using gzip, bzip2, 7zip, etc.</b></p>

<ul>
<p lingdex=3D"27"></p><li><em>Mac OS X or Linux.</em> Use the <tt>time</tt>=
 command as above, but
with <tt>gzip</tt> or <tt>bzip2</tt>.
=20
<p lingdex=3D"28"></p></li><li><em>Windows.</em> There is no built-in data =
compression program (such as gzip or bzip2).
We recommend downloading the free
<a href=3D"http://www.7-zip.org/">7-zip</a> program.
After installing 7-zip, create a new batch file (any filename ending in <tt=
>.bat</tt>)
with the following text:

<pre>    echo %time%
    7za a -tzip mobyDickOutputFileName.zip mobydick.txt
    echo %time%
</pre>
<p lingdex=3D"29">This creates a file in .zip format (the same used nativel=
y by Windows for compression). To test unzipping time, use the following:

</p><pre>    echo %time%
    7za e mobyDickOutputFileName.zip=20
    echo %time%
</pre>
</li></ul>

<p lingdex=3D"30">If you're interested in testing against other compression=
 formats, then see <a href=3D"http://www.dotnetperls.com/7-zip-examples">th=
is page</a>.





</p><p lingdex=3D"31">

<table border=3D"0" cellpadding=3D"2" cellspacing=3D"0" width=3D"100%"> <tb=
ody><tr align=3D"left"> <td bgcolor=3D"000000"> <font size=3D"+0" face=3D"h=
elvetica" color=3D"ffffff"> <center>Possible=20
Progress Steps</center> </font></td></tr></tbody></table> </p><p lingdex=3D=
"32">

These are purely suggestions for how you might make progress.  You do not h=
ave to follow=20
these steps.

</p><ul> <li> Download the directory
<a href=3D"http://coursera.cs.princeton.edu/algs4/testing/burrows"> <tt>bur=
rows</tt></a> to your system.
It contains some sample input files and reference solutions.
For convenience, <a href=3D"http://coursera.cs.princeton.edu/algs4/testing/=
burrows-testing.zip">burrows-testing.zip</a>
contains all of these files bundled together.


<p lingdex=3D"33"></p></li><li> Implement the <tt>CircularSuffixArray</tt>.=
 Be sure not to create
explicit copies of the string (e.g., via the <tt>substring()</tt> method in=
 Java's <tt>String</tt> data type)
when you sort the suffixes. That would take quadratic space.
Instead for each suffix, you only need to keep an index that indicates whic=
h character is the beginning of the suffix.
This way you can build the <em>N</em> suffixes in linear time and space.
Then sort this array of indices. It's just like sorting an array of referen=
ces.

<p lingdex=3D"34"></p></li><li> Implement the Burrows-Wheeler transform, us=
ing the <tt>CircularSuffixArray</tt> class.

<p lingdex=3D"35"></p></li><li> The Burrows-Wheeler decoding is the trickie=
st part, but it is very little code=20
once you understand how it works. (Not including declarations and input, ou=
r solution is
about 10 lines of code.) You may find the key-indexed counting algorithm fr=
om the string=20
sorting lecture to be useful.

<p lingdex=3D"36"></p></li><li> Implement the move-to-front encoding and de=
coding algorithms. Not including=20
comments and declarations, our solutions are about 10 lines of code each. I=
f yours is=20
significantly longer, try to simplify it.

</li></ul>




=20

<style type=3D"text/css">.lingualy-translate-close {background: url("chrome=
-extension://iilcekgoelpgecpjnnoikhbleipnjdhf/lookup/assets/translate/x_nor=
mal.png") no-repeat;}.lingualy-translate-close:hover {background: url("chro=
me-extension://iilcekgoelpgecpjnnoikhbleipnjdhf/lookup/assets/translate/x_o=
ver.png");}.lingualy_popup .lingualy_close {background: url("chrome-extensi=
on://iilcekgoelpgecpjnnoikhbleipnjdhf/lookup/assets/andy-sprite.png") no-re=
peat 0 -50px;}</style></body></html>
------=_NextPart_000_B255_49F278D0.45CD3CB6--
