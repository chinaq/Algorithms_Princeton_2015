public class LSDsuf {
    // do not instantiate
    private LSDsuf() { }

    
    
     public static void sort(String a, int[] index) {
        int W = a.length();
        int N = index.length;
        int R = 256;   // extend ASCII alphabet size
        int[] aux = new int[N];

        for (int d = W-1; d >= 0; d--) {
            // sort by key-indexed counting on dth character

            // compute frequency counts
            int[] count = new int[R+1];
            for (int i = 0; i < N; i++)
                count[a.charAt((index[i] + d) % W) + 1]++;

            // compute cumulates
            for (int r = 0; r < R; r++)
                count[r+1] += count[r];

            // move data
            for (int i = 0; i < N; i++)
                aux[count[a.charAt((index[i] + d) % W)]++] = index[i];

            // copy back
            for (int i = 0; i < N; i++)
                index[i] = aux[i];
        }
    }
    
        
    
    
    public static void main(String[] args) {
//        String[] a = StdIn.readAllStrings();
//        int N = a.length;
//
//        // check that strings have fixed length
//        int W = a[0].length();
//        for (int i = 0; i < N; i++)
//            assert a[i].length() == W : "Strings must have fixed length";
//
//        // sort the strings
//        sort(a, W);
//
//        // print results
//        for (int i = 0; i < N; i++)
//            StdOut.println(a[i]);
    }
}